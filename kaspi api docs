# API Kaspi для магазина: краткое руководство
**Официальный API магазина на Kaspi.kz** позволяет автоматизировать публикацию
товаров и обработку заказов. Ниже приведён структурированный пересказ всех
вопросов и ответов из официального руководства (вкладки «Товары», «Заказы»,
«Общие вопросы»). В тексте указаны параметры запросов и описаны возможности,
которые могут быть полезны при интеграции магазина и для последующей работы с
WhatsApp Business API.
## Общие вопросы
| Вопрос | Основные выводы |
| --- | --- |
| **Для чего нужен API?** | API — это программный интерфейс, позволяющий
продавцам автоматизировать загрузку товаров, обработку заказов и интеграцию с
учётными системами (1С, RKeeper, Paloma, Umag). API сокращает время работы с
заказами и уменьшает количество ошибок. Он использует формат JSON и позволяет
обновлять остатки и цены без ручного ввода【399079437412140†screenshot】. |
| **Кто может получить токен?** | Авторизационный токен может сгенерировать
только руководитель компании. Для этого нужно войти в кабинет продавца, перейти
в «Настройки» → «API токен» и нажать
«Сгенерировать»【156322056200352†screenshot】. Токен не меняется, его следует
передать только техническому специалисту. |
| **Как делать запросы?** | Каждый запрос должен содержать: метод (GET, POST,
PUT), параметры (sort, page, filter), заголовки `Content-Type` (application/json
или application/vnd.api+json), `X-Auth-Token` (ваш токен) и `Accept` (тип
возвращаемого ответа). Параметры позволяют сортировать, постранично возвращать
данные и фильтровать по статусу, дате и пр.【52909431863829†screenshot】. |
| **Кнопка «Купить в кредит» для сайта** | Для размещения на сайте кнопки
«Купить в кредит» нужно добавить HTML-код с атрибутами `data-merchant-sku`
(артикул товара), `data-merchant-code` (ID магазина в разделе «Настройки» → «ID
магазина») и `data-city` (код города). Стили кнопки (красная, синяя, плоская)
выбираются через `data-design`. Если кнопка добавляется динамически, требуется
вызвать `ksWidgetInitializer.reinit()`【704588786430613†screenshot】. При
нажатии клиент видит карточку товара и может оформить кредит
【580625754829192†screenshot】. |
| **Что такое авторизационный токен?** | Уникальный код, подтверждающий, что
запросы выполняет именно ваш магазин. Его нужно хранить в безопасности; не
передавать третьим лицам【125095750007736†screenshot】. |
| **Что значит HTTP-код 200?** | Код 200 в ответе означает успешную обработку
запроса. Другие коды сообщают об ошибках (например, 400 – неверный запрос, 401 –
неправильный токен)【663119274710122†screenshot】. |
| **Как получить коды городов?** | В руководстве приведена таблица кодов городов
(например, 353220100 — Абай, 113220100 — Акколь и т.д.), которую можно
использовать для параметра `data-city` при добавлении кнопки «Купить в
кредит»【29920000463183†screenshot】. |
## Товары
### Добавление и описание товаров
| Вопрос | Инструкции |
| --- | --- |
| **Как добавить товар?** | Нужно отправить POST-запрос на эндпоинт
`/shop/api/v2/products/create` (пример в руководстве). В теле запроса
указываются: `sku` (артикул товара), `title` (название), `brand`, `category`
(код категории), `description`, `images` (URL изображений), `attributes` (список
характеристик). Каждый атрибут должен иметь `code` (код характеристики) и
`value` (значение). Коды категорий и характеристик предварительно получаются
через отдельные API-запросы【808035559373237†screenshot】. |
| **Как получить список характеристик категории?** | Сделайте GET-запрос с
параметром `c` — код категории. Ответ содержит массив характеристик с полями:
`code`, `type` (boolean, enum, string, number), `multiValued` (разрешено ли
несколько значений) и `mandatory` (обязательность). Эти коды нужны для
заполнения `attributes` при создании товара【516374422175697†screenshot】. |
| **Как получить JSON-схему для добавления товара?** | GET-запрос возвращает
схему, где перечислены возможные параметры для добавления товаров; её можно
использовать для валидации. |
| **Как получить коды категорий?** | GET-запрос возвращает список категорий с
полями `code` и `title`. Используйте полученные коды в параметре `category` при
создании товаров【287180189482119†screenshot】. |
| **Как проверить, что товар добавлен?** | После создания товара API возвращает
`code` (код загрузки). Чтобы проверить статус, отправьте GET-запрос
`/shop/api/v2/products/uploads/<code>`. В ответе будут поля `status` и
`description`. Статус может быть PROCESSING, COMPLETED или ERROR
【562071464367353†screenshot】. |
| **Как получить результат загрузки?** | Запрос
`/shop/api/v2/products/uploads/<code>/result` возвращает количество товаров с
ошибками (`errors`), предупреждениями (`warnings`), пропущенных (`skipped`) и
всего загруженных (`total`). Поле `state` показывает результат (e.g. PROCESSED)
【86855812574961†screenshot】. |
| **Как получить возможные значения для характеристики?** | Сделайте GET-запрос
с параметрами `c` (код категории) и `a` (код характеристики). Ответ содержит
значения: `code` (код значения) и `name` (наименование), которые нужно
использовать в `attributes` при создании товара【184616406890072†screenshot】. |
> **Важно:** API не предоставляет отдельного метода для скачивания полного
списка товаров магазина. Прайс-лист с названиями, SKU, ценой, остатками и кодом
товара можно выгружать из личного кабинета в виде Excel/CSV. После загрузки
файла программа может извлечь из него SKU, название (`model`), цену (`price`),
остаток (`stock`), а также «код товара» (число после подчеркивания в SKU или
отдельное поле).
> Если нужны массовые изменения (цен, остатков), вы можете обновлять прайс через
HTTP POST и PUT в формате JSON или загружать файл через кабинет.
## Заказы
API Kaspi позволяет просматривать заказы, менять их статусы и получать
контактные данные покупателей. Это важно для последующей коммуникации через
WhatsApp Business API (например, чтобы уточнить размеры одежды). Основные
методы:
### 1. Получение списка заказов
**Запрос:** `GET /shop/api/v2/orders` с параметрами:
- `page[number]` — номер страницы (от 0).
- `page[size]` — количество заказов на странице (до 100).
- `filter[orders][state]` — состояние заказа: `NEW`, `SIGN_REQUIRED`, `PICKUP`,
`DELIVERY`, `KASPI_DELIVERY`, `ARCHIVE`.
- `filter[orders][creationDate][$ge]` и `$le` — интервал даты создания в
миллисекундах.
- `filter[orders][status]` — статус: `APPROVED_BY_BANK`, `ACCEPTED_BY_MERCHANT`,
`COMPLETED`, `CANCELLED`, `CANCELLING`, `KASPI_DELIVERY_RETURN_REQUESTED`,
`RETURNED` и др.
- `filter[orders][deliveryType]` — тип доставки: `PICKUP`, `DELIVERY`,
`KASPI_DELIVERY`.
- `filter[orders][signatureRequired]` — требуется ли подпись (true/false).
- `include[orders]=user` — вернуть данные покупателя (имя и телефон)
【691389402870738†screenshot】.
**Ответ** включает:
- `code` — код заказа.
- `totalPrice` — итоговая цена.
- `customer` — **данные покупателя**, включая `id`, `firstName`, `lastName` и
`cellPhone`【130643262227568†screenshot】.
- `deliveryMode` — способ доставки: `DELIVERY_LOCAL`, `DELIVERY_PICKUP`,
`DELIVERY_DELIVERY`, `DELIVERY_POSTAMAT` и т.д.
- `paymentMode` — `PAY_WITH_CREDIT` (рассрочка) или `PREPAID`.
- `signatureRequired`, `creditTerm`, `preOrder` (предзаказ), `state`,
`creationDate`, `approvedByBankDate`, `plannedDeliveryDate`, `reservationDate`,
`status` (e.g. APPROVED_BY_BANK, COMPLETED, CANCELLED)
【130643262227568†screenshot】.
- `deliveryCost`, `deliveryAddress`, `waybillNumber`, `category`, `entries` —
товары в заказе.
> Получение имени и телефона клиента через `include[orders]=user` позволяет
отправлять ему шаблонные сообщения в WhatsApp (например, уточнить размер). Это
должно соответствовать правилам сервиса, поэтому храните согласия покупателей и
используйте шаблоны сообщений.
### 2. Получение заказа по коду
**Запрос:** `GET /shop/api/v2/orders?filter[orders][code]=<код>`.
**Ответ** аналогичен списку, но возвращает один заказ и более подробную
информацию: адрес доставки (`streetName`, `streetNumber`, `town`, `latitude`,
`longitude`), `pickupPointId` и `deliveryMode`【662595711892247†L98-L142】. Поле
`customer` содержит id, имя, фамилию и телефон клиента【662595711892247†L253-
L388】.
### 3. Получение товаров в заказе
**Запрос:** `GET /shop/api/v2/orders/{orderId}/entries`.
**Ответ** содержит позиции заказа с полями:
- `id` — идентификатор позиции (orderEntryId).
- `unitType` — тип единицы: `MEASURABLE_PIECES`, `MEASURABLE`, `PIECES`.
- `quantity`, `totalPrice`, `weight`, `entryNumber`, `category.code` и
`category.title`, `deliveryCost`, `basePrice`, `isImeiRequired`
【961012916585996†L102-L152】.
- `relationships.product.data` — идентификатор masterProduct, который можно
использовать для запроса описания товара.
### 4. Получение отдельной позиции заказа
**Запрос:** `GET /shop/api/v2/orderentries/{orderEntryId}` (требует ID позиции).
**Ответ** возвращает поля `id`, `unitType`, `minAllowedWeight`, `quantity`,
`totalPrice`, `weight`, `entryNumber`, `code` (код категории), `title` (название
категории), `deliveryCost`, `basePrice`【107817507517713†L102-L188】.
### 5. Узнать склад, где покупатель будет получать товар
- **Запрос:** `GET
/shop/api/v2/orderentries/{orderEntryId}/deliveryPointOfService` (ID позиции
заказа).
- **Ответ:** `id` склада и `address` (улица, номер дома, населённый пункт,
район, долгота/широта)【240949727857604†L103-L180】. Поле `displayName` может
содержать номер склада или название【240949727857604†L190-L207】.
### 6. Получить адрес склада по ID
**Запрос:** `GET /shop/api/v2/pointofservices/{pointOfServiceId}`.
**Ответ:** подробный адрес склада, `displayName`, координаты
【149064972077594†L88-L167】.
### 7. Получить описание товара в заказе (получение SKU и названия)
**Запрос:** `GET /shop/api/v2/orderentries/{orderEntryId}/product`.
**Ответ** содержит:
- `id` — идентификатор masterProduct.
- `code` — **код товара в Kaspi** (из прайс-листа).
- `name` — наименование товара (model).
- `manufacturer` — бренд.
- `category` — категория товара【777950310808086†L100-L143】.
Это позволяет получить название и код товара для каждой позиции заказа. Чтобы
узнать текущую цену или остаток, требуется обращаться к прайс-листу, так как API
не отдаёт эти данные напрямую.
### 8. Принять новый заказ (изменить статус)
**Запрос:** `POST /shop/api/v2/orders` с телом:
```json
{
"data": {
"type": "orders",
"id": "<orderId>",
"attributes": {
"code": "<код заказа>",
"status": "ACCEPTED_BY_MERCHANT"
}
}
}
```
Ответ возвращает заказ с обновлённым статусом `ACCEPTED_BY_MERCHANT`
【844527715288056†L83-L161】.
### 9. Собрать заказ для Kaspi Delivery (оформить накладную)
Чтобы распечатать накладную для Kaspi Delivery, сначала следует перевести заказ
в статус `ASSEMBLE` и указать количество мест (упаковок).
**Запрос:** `POST /shop/api/v2/orders` с телом:
```json
{
"data": {
"type": "orders",
"id": "<orderId>",
"attributes": {
"status": "ASSEMBLE",
"numberOfSpace": 2
}
}
}
```
Ответ содержит обновлённый статус и число мест【59061075033028†L70-L131】.
### 10. Указать IMEI-коды
Для товаров, требующих IMEI (смартфоны), нужно отправить IMEI-коды в заказ.
**Запрос:** `POST /shop/api/v2/orderEntryImeiOperation`:
```json
{
"data": {
"type": "orderEntryImeiOperation",
"attributes": {
"items": ["IMEI1", "IMEI2"]
},
"relationships": {
"entry": {
"data": {
"type": "orderentries",
"id": "<orderEntryId>"
}
}
}
}
}
```
Ответ возвращает статус операции (`SUCCESSFUL`), что означает привязку IMEI к
заказу【546634830513037†L84-L107】. При необходимости можно добавлять несколько
IMEI через массив `items`【546634830513037†L236-L245】.
### 11. Завершить заказ («Выдан»)
Процедура состоит из двух шагов:
1. **Отправить код подтверждения клиенту.** Сделайте POST-запрос с заголовками
`X-Send-Code: true` и `X-Security-Code: ""`.
2. **Завершить заказ.** После того как клиент предоставит полученный код,
повторите POST-запрос с `status: "COMPLETED"` и укажите `X-Security-Code` (код
из SMS/Push).
Ответ возвращает заказ со статусом `COMPLETED`【989086498254156†L80-L163】.
### 12. Отменить заказ
**Запрос:** `POST /shop/api/v2/orders` с телом:
```json
{
"data": {
"type": "orders",
"id": "<orderId>",
"attributes": {
"code": "<код заказа>",
"status": "CANCELLED",
"cancellationReason": "MERCHANT_OUT_OF_STOCK",
"cancellationComment": "нет товара"
}
}
}
```
Поле `cancellationReason` может быть `BUYER_CANCELLATION_BY_MERCHANT`,
`BUYER_NOT_REACHABLE` или `MERCHANT_OUT_OF_STOCK`.
`cancellationComment` — комментарий до 1000 символов.
В ответе заказ будет иметь статус `CANCELLED`【942702411458863†L90-L156】.
### 13. Удалить часть товаров из заказа (частичная отмена)
**Запрос:** `POST /shop/api/v2/orderEntryCancelOperation`:
```json
{
"data": {
"type": "orderEntryCancelOperation",
"attributes": {
"notes": "нет размера",
"remainedQuantity": 1,
"reason": "MERCHANT_OUT_OF_STOCK"
},
"relationships": {
"entry": {
"data": {
"type": "orderentries",
"id": "<orderEntryId>"
}
}
}
}
}
```
Ответ содержит данные об операции (ID, оставшееся количество, статус
`INPROGRESS`)【418403653461216†L100-L160】. После этого можно указать
вес/количество, если товар взвешивается, через PUT
`/orderPartialCancel/<operationId>`【634060843014062†L98-L158】.
## Выводы и рекомендации
1. **Получение данных о товарах.** API позволяет получать характеристики и коды
товаров только в контексте заказов (через `/orderentries/{id}/product`). Для
выгрузки всех товаров с остатками и ценами нужно пользоваться прайс-листом из
кабинета.
2. **Работа с заказами.** Все функции: просмотр списка заказов, получение
деталей, изменение статуса, отправка IMEI, частичная отмена, генерация
накладной, подтверждение выдачи и аннулирование — реализованы через API. При
вызове методов можно включить `include[orders]=user` для получения имени и
телефона клиента и затем отправлять шаблонные сообщения через WhatsApp Business
API (учитывая правила GDPR/ПДн).
3. **Использование токена.** Доступ к API открывается только после получения
токена руководителем. Запросы требуют заголовок `X-Auth-Token` и
Content-Type JSON.
4. **Примеры шаблонов сообщений.** Зная имя и телефон покупателя, продавец может
написать, например: «Здравствуйте, вы заказали товар в нашем магазине на
Kaspi.kz. Для подбора подходящего размера уточните, пожалуйста, …». Используйте
WhatsApp Business API и заранее согласованный шаблон.
## Заключение
Официальный API Kaspi позволяет автоматизировать основные процессы: загрузку
товаров, получение характеристик, управление заказами и получение контактных
данных клиентов. Для массовой выгрузки прайс-листов и информации о наличии
используется файл-прайс в личном кабинете, потому что API не предоставляет
эндпоинта для полного списка товаров. Следуя инструкциям из этого руководства и
официальной документации Kaspi, вы сможете интегрировать магазин с собственной
системой и наладить эффективную коммуникацию с клиентами.