*** Begin Patch
*** Update File: TASKS.yaml
@@
-in_progress:
-  - id: UI-002
-    started: true
+in_progress:
+  - id: CORE-LOOP-001
+    started: true
+    title: Ensure settings v2 persist correctly
+    description: >
+      Verify that editing min/max/step/interval in the UI persists to server/db/pricebot.settings.json
+      via the settings endpoint. The UI should reflect updated values after reload.
+    AC:
+      - Editing settings saves to server/db/pricebot.settings.json
+      - GET /api/pricebot/pricebot/settings returns new values
+      - UI reload shows updated values
+
+# UI-002 moved back to backlog below
*** End Patch

*** Update File: TASKS.yaml
@@ backlog:
	•		•	id: UI-002
	•	title: Improve OpponentsPanel integration
	•	description: Refactor seller loading to be optional and asynchronous. Ensure caching and error handling.
	•	AC:
	•	 - Opponents list loads separately from offers
	•	 - Failures show fallback message instead of blocking
	•	 - Caching respects TTL and merchant city
	•
    •	id: UI-002
	•	title: Improve OpponentsPanel integration
	•	description: |
	•	 Refactor seller loading so it is optional and does not block the main pricing loop.
	•	 Once core pricing loop is complete, revisit seller scraping. Opponents should be cached per (productId, cityId) and load asynchronously. Failures should fall back gracefully.
	•	AC:         
	•	 - Opponents list loads separately from offers and does not block UI
	•	 - Failures show fallback message instead of blocking
	•	 - Caching respects TTL and merchant city
 	•		
    •	id: CORE-LOOP-002
	•	title: Return offers without opponents
	•	description: |
	•	Ensure GET /api/pricebot/pricebot/offers?withOpponents=false returns valid JSON of own SKUs, prices, and stock.
	•	Do not attempt to fetch opponents in this task.
	•	AC:
    •	 - Endpoint returns a JSON array of SKUs with price and stock
	•	 - Response is valid even if opponents route fails
    •	
    •	
	•	id: CORE-LOOP-003
	•	title: Compute dry-run proposals
	•	description: |
	•	Implement dry-run logic for proposals ignoring opponents. Use settings (min/max/step/interval) and current price/stock.
    •	AC:
	•	 - POST /api/pricebot/pricebot/run?merchantId=...&dry=true returns proposals array
    •	 - Each proposal includes sku, current price, and target price within min/max
    •	
	•	id: CORE-LOOP-004
	•	title: Add price-watch scheduler script
	•	description: |
	•	 Create a Node/TypeScript script that runs /api/pricebot/pricebot/run?dry=true on a schedule (e.g. every 10 minutes).
	•	AC:
    •	 - Script can be started via pnpm (e.g. pnpm ts-node scripts/price_watch.ts)
    •	 - Script logs results and schedules itself repeatedly
    *** End Patch

*** Update File: STATE.json
@@
	•	“lastSeen”: {
	•	“taskId”: “UI-002”,
	•	“idx”: 0
	•	},

	•	“lastSeen”: {
	•	“taskId”: “CORE-LOOP-001”,
	•	“idx”: 0
	•	},

*** End Patch

*** Update File: PROGRESS.md
@@
+## 2025-08-12 15:50 UTC
+
+Pivot to core repricing loop: After days of effort fighting the seller/opponent scraping, we decided to prioritise the main pricing loop and make sellers optional. We added new tasks CORE-LOOP-001 to CORE-LOOP-004, which cover settings persistence, returning offers without opponents, computing dry-run proposals, and adding a scheduler. We moved UI-002 back to the backlog. STATE.json updated to point to CORE-LOOP-001. The default for offers API calls is withOpponents=false so that endpoints always return valid data. Seller scraping will be revisited later with caching and optional Playwright fallback.
+
*** End Patch

*** Update File: DECISIONS.md
@@
+### 2025-08-12: Pivot to core repricing loop
+
+What changed? We realised chasing seller counts and scraping the public product page was blocking delivery of the core feature: automated repricing using merchant data. We added four new “CORE-LOOP” tasks and moved UI-002 back to backlog. Opponents/seller data is now optional; proposals and price adjustments will run on min/max/step logic using merchant offers only. Scraping remains a separate enhancement behind a flag.
+
+Why? The merchant API remains reliable for our own SKUs, whereas the yml/offer-view/offers endpoint is frequently blocked. Our goal is to complete the dry-run → proposal → apply loop, not to perfect competitor data at the cost of weeks. Once the core loop is robust, we will revisit scraping with cache and fallback to Playwright if needed.
+
+Impact: Developers must not block on opponents in endpoints; always return offers with withOpponents=false by default. New tasks guide implementation. The branch feat/offers-dashboard now focuses exclusively on the repricing loop.
+
*** End Patch

*** Add File: .gitignore
+# Ignore assistant bundles (large snapshots for analysis)
+assistant_bundles/
+apps/**/assistant_bundles/

*** End Patch