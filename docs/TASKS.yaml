version: 1

in_progress:
  - id: CRM-A.1
    started: true
    title: Add normalization rules (sizes, ignore prefixes)
  - id: CRM-A.2
    started: true
    title: Implement repair script
  - id: CRM-A.3
    started: true
    title: Rebuild mappings/outputs and add coverage report
    description: |
      Update processing to use fixed sales if present and generate mapping coverage report.
    AC:
      - scripts/crm_process_sales.py prefers sales_ksp_crm_fixed.xlsx
      - data_crm/processed_sales_20250813.csv regenerated
      - data_crm/stock_on_hand_updated.csv regenerated
      - data_crm/missing_skus.csv regenerated
      - data_crm/reports/mapping_coverage.csv created
    description: |
      Normalize my_size, derive sku_key from names, drop ignored prefixes, write fixed file and delta report.
    AC:
      - scripts/crm_repair_sales.py exists and runs
      - data_crm/sales_ksp_crm_fixed.xlsx and data_crm/reports/repair_changes.csv written
    description: |
      Create size normalization CSV and ignore prefixes to filter non-clothing SKUs.
    AC:
      - data_crm/rules/size_normalization.csv exists with basic mappings
      - data_crm/rules/ignore_prefixes.txt exists with ELS_
  - id: CORE-LOOP-001
    started: true
    title: Ensure settings v2 persist correctly
    description: >
      Verify that editing min/max/step/interval in the UI persists to server/db/pricebot.settings.json
      via the settings endpoint. The UI should reflect updated values after reload.
    AC:
      - Editing settings saves to server/db/pricebot.settings.json
      - GET /api/pricebot/pricebot/settings returns new values
      - UI reload shows updated values

backlog:
  - id: UI-002
    title: Improve OpponentsPanel integration
    description: |
      Refactor seller loading so it is optional and does not block the main pricing loop.
      Once the core pricing loop is complete, revisit seller scraping. Opponents should be cached per (productId, cityId)
      and load asynchronously. Failures should fall back gracefully.
    AC:
      - Opponents list loads separately from offers and does not block UI
      - Failures show fallback message instead of blocking
      - Caching respects TTL and merchant city

  - id: CORE-LOOP-002
    title: Return offers without opponents
    description: |
      Ensure GET /api/pricebot/pricebot/offers?withOpponents=false returns valid JSON of own SKUs, prices, and stock.
      Do not attempt to fetch opponents in this task.
    AC:
      - Endpoint returns a JSON array of SKUs with price and stock
      - Response is valid even if opponents route fails

  - id: CORE-LOOP-003
    title: Compute dry-run proposals
    description: |
      Implement dry-run logic for proposals ignoring opponents. Use settings (min/max/step/interval) and current price/stock.
    AC:
      - POST /api/pricebot/pricebot/run?merchantId=...&dry=true returns proposals array
      - Each proposal includes sku, current price, and target price within min/max

  - id: CORE-LOOP-004
done:
  - id: PH1-REPAIR
    title: Phase 1 - Repair sales file
    description: Normalize sizes, derive sku_key, drop ignored prefixes; write fixed and delta report
    completed: true
  - id: PH1-PDFS
    title: Phase 1 - PDFs/labels pipeline
    description: Initial labels step acknowledged (external script hook)
    completed: true

todo:
  - id: PH1-LOAD-DB
    title: Phase 1 - Load processed sales into ERP DB
    description: Load `data_crm/processed_sales_20250813.csv` into `db/erp.db` as table `sales`
    AC:
      - CSV loaded to SQLite
      - Table name `sales` in lower-case
  - id: PH1-ORCH
    title: Phase 1 - Daily operations orchestrator
    description: Create `scripts/daily_operations.py` to run repair → process → labels
    AC:
      - Orchestrator script exists and runs end-to-end
    title: Add price-watch scheduler script
    description: |
      Create a Node/TypeScript script that runs /api/pricebot/pricebot/run?dry=true on a schedule (e.g. every 10 minutes).
    AC:
      - Script can be started via pnpm (e.g. pnpm ts-node scripts/price_watch.ts)
      - Script logs results and schedules itself repeatedly
